import streamlit as st
import numpy as np
import pandas as pd
import io


# Function to get user inputs for the Income Approach
def get_income_approach_inputs():
    st.subheader("Income Approach")
    with st.expander("Income Approach Tips"):
        st.write("""
            - **Initial Revenue**: The revenue generated by the intangible asset in the first year.
            - **Growth Rate**: The annual increase in revenue expected, entered as a percentage.
            - **Discount Rate**: The rate used to discount future revenues to their present value, entered as a percentage.
            - **Useful Life**: The expected number of years the intangible asset will generate revenue.
        """)
    with st.form("Income Approach Form"):
        initial_revenue = st.number_input("Enter the initial annual revenue generated by the intangible asset (in INR)",
                                          min_value=0.0)
        growth_rate = st.number_input("Enter the annual growth rate (as a percentage, e.g., 5 for 5%)",
                                      min_value=0.0) / 100
        discount_rate = st.number_input("Enter the discount rate (as a percentage, e.g., 10 for 10%)",
                                        min_value=0.0) / 100
        useful_life = st.number_input("Enter the useful life of the intangible asset (in years)", min_value=1, step=1)
        submitted = st.form_submit_button("Calculate Income Approach Value")

    if submitted and initial_revenue > 0:
        return initial_revenue, growth_rate, discount_rate, useful_life
    else:
        return 0, 0, 0, 0


# Function to calculate present value of future revenues
def calculate_present_value(initial_revenue, growth_rate, discount_rate, useful_life):
    if initial_revenue == 0:
        return 0
    revenues = [initial_revenue * (1 + growth_rate) ** t for t in range(useful_life)]
    present_value = sum([revenues[t] / (1 + discount_rate) ** (t + 1) for t in range(useful_life)])
    return present_value


# Function to get user inputs for the Market Approach
def get_market_approach_inputs():
    st.subheader("Market Approach")
    with st.expander("Market Approach Tips"):
        st.write("""
            - **Comparable Transactions**: The number of similar transactions you will use for comparison.
            - **Sale Price**: The sale price of each comparable transaction.
            - **Adjustment**: The percentage adjustment to account for differences between the comparable and the asset being valued.
        """)
    num_comparables = st.number_input("Enter the number of comparable transactions", min_value=0, step=1)
    comparables = []

    if num_comparables > 0:
        for i in range(num_comparables):
            with st.form(f"Comparable {i + 1} Form"):
                price = st.number_input(f"Enter the sale price of comparable {i + 1} (in INR)", min_value=0.0)
                adjustment = st.number_input(
                    f"Enter the adjustment for comparable {i + 1} (as a percentage, e.g., -10 for -10%)",
                    min_value=-100.0) / 100
                adjusted_price = price * (1 + adjustment)
                comparables.append(adjusted_price)
                submitted = st.form_submit_button(f"Add Comparable {i + 1}")

    return comparables


# Function to estimate value from comparables
def estimate_value_from_comparables(comparables):
    if len(comparables) == 0:
        return 0
    estimated_value = sum(comparables) / len(comparables)
    return estimated_value


# Function to get user inputs for the Cost Approach
def get_cost_approach_inputs():
    st.subheader("Cost Approach")
    with st.expander("Cost Approach Tips"):
        st.write("""
            - **Reproduction Cost**: The cost to reproduce the intangible asset.
            - **Depreciation Rate**: The rate at which the asset loses value over time, entered as a percentage.
        """)
    with st.form("Cost Approach Form"):
        reproduction_cost = st.number_input("Enter the reproduction cost of the intangible asset (in INR)",
                                            min_value=0.0)
        depreciation_rate = st.number_input("Enter the depreciation rate (as a percentage, e.g., 20 for 20%)",
                                            min_value=0.0) / 100
        submitted = st.form_submit_button("Calculate Cost Approach Value")

    if submitted:
        return reproduction_cost, depreciation_rate
    else:
        return 0, 0


# Function to calculate cost value
def calculate_cost_value(reproduction_cost, depreciation_rate):
    value = reproduction_cost * (1 - depreciation_rate)
    return value


# Function to get combined valuation
def get_combined_valuation(values):
    non_zero_values = [value for value in values if value > 0]
    combined_value = sum(non_zero_values) / len(non_zero_values) if non_zero_values else 0
    return combined_value


# Function to create a DataFrame for download
def create_valuation_dataframe(income_value, market_value, cost_value, combined_value):
    data = {
        "Approach": ["Income Approach", "Market Approach", "Cost Approach", "Combined Value"],
        "Value (INR)": [income_value, market_value, cost_value, combined_value]
    }
    df = pd.DataFrame(data)
    return df


# Function to generate CSV
def generate_csv(df):
    buffer = io.StringIO()
    df.to_csv(buffer, index=False)
    return buffer.getvalue()


# Main function
def main():
    st.title("Intangible Asset Valuation")

    # Income Approach
    initial_revenue, growth_rate, discount_rate, useful_life = get_income_approach_inputs()
    income_value = calculate_present_value(initial_revenue, growth_rate, discount_rate, useful_life)
    if income_value > 0:
        st.write(f"Estimated Value based on Income Approach: INR {income_value:,.2f}")
    else:
        st.write("Income Approach skipped due to zero initial revenue.")

    # Market Approach
    comparables = get_market_approach_inputs()
    market_value = estimate_value_from_comparables(comparables)
    st.write(f"Estimated Value based on Market Approach: INR {market_value:,.2f}")

    # Cost Approach
    reproduction_cost, depreciation_rate = get_cost_approach_inputs()
    cost_value = calculate_cost_value(reproduction_cost, depreciation_rate)
    st.write(f"Estimated Value based on Cost Approach: INR {cost_value:,.2f}")

    # Combined Valuation
    combined_value = get_combined_valuation([income_value, market_value, cost_value])
    st.write(f"Combined Estimated Value: INR {combined_value:,.2f}")

    # Display results in columns
    st.subheader("Valuation Results")
    col1, col2, col3 = st.columns(3)
    col1.metric("Income Approach", f"INR {income_value:,.2f}")
    col2.metric("Market Approach", f"INR {market_value:,.2f}")
    col3.metric("Cost Approach", f"INR {cost_value:,.2f}")
    st.metric("Combined Estimated Value", f"INR {combined_value:,.2f}")

    # Visualization
    st.subheader("Valuation Comparison")
    valuation_methods = ["Income Approach", "Market Approach", "Cost Approach"]
    valuation_values = [income_value, market_value, cost_value]
    valuation_data = pd.DataFrame({
        "Method": valuation_methods,
        "Value": valuation_values
    })

    st.bar_chart(valuation_data.set_index("Method"))

    if combined_value > 0:
        st.write("Valuation Summary")
        st.dataframe(valuation_data)

    # Provide option to download results
    st.subheader("Download Results")
    valuation_df = create_valuation_dataframe(income_value, market_value, cost_value, combined_value)
    csv_data = generate_csv(valuation_df)

    st.download_button(
        label="Download Valuation Data as CSV",
        data=csv_data,
        file_name='valuation_data.csv',
        mime='text/csv'
    )


if __name__ == "__main__":
    main()

